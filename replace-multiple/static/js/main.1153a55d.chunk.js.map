{"version":3,"sources":["utils.js","Area.js","AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["renderArrows","inputSt","x","split","fill","join","example","Area","value","placeholder","setValue","undefined","disabled","readOnly","additionalStyle","children","Box","flex","padding","TextareaAutosize","rowsMin","style","rowsMax","className","onChange","e","target","AppContainer","useState","text","setText","Array","from","setFrom","to","setTo","useEffect","Container","height","display","flexDirection","justifyContent","Button","size","onClick","textAlign","border","mx","fullWidth","variant","replaced","fromAr","toAr","zipped","reduce","acc","item","i","Object","keys","key","arr","regex","RegExp","replace","replaceMultiple","m","App","prefersDarkMode","useMediaQuery","theme","useMemo","createMuiTheme","palette","type","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1153a55d.chunk.js","sourcesContent":["export const replaceMultiple = (text, from, to) => {\n  const fromAr = from.split('\\n');\n  const toAr = to.split('\\n');\n  const zipped = fromAr.reduce((acc, item, i) => {\n    return { ...(toAr && { [item]: toAr[i] }), ...acc };\n  }, {});\n  const result = Object.keys(zipped).reduce((acc, key, arr) => {\n    const regex = new RegExp(key, 'g');\n    if(!key || !zipped[ key ]) return acc;\n    return acc.replace(regex, zipped[key]);\n  }, text);\n  return result;\n};\n\nexport const renderArrows = (inputSt = '') => {\n  const x = inputSt.split('\\n').fill('').join('\\n--->');\n  return '--->' + x;\n};\n\nexport const placeholder = (rows) => new Array(rows).fill('X').join('\\n');\n\nexport const example = {\n  text: `Hit Replace button to change phrases from \"From\" list to \"To\" list to see it on the example or press Clear all. \n  Example usecases:\n  - text\n      brown fox jumps over the lazy dog and the dog was barking\n  - sql insert statements\n      INSERT INTO animals VALUES (1, dog, black, big )\n      INSERT INTO animals VALUES (2, dog, white, medium )\n      INSERT INTO animals VALUES (1, dog, green, big )\n  - tables (csv files)\n      1,dog,black,big,bark `,\n  from: `dog\nbig\nbark`,\n  to: `cat\nsmall\nmiau`,\n};\n","import { Box, TextareaAutosize } from '@material-ui/core';\nimport React from 'react';\n\nconst Area = ({\n  value = '',\n  placeholder,\n  setValue = undefined,\n  disabled = false,\n  readOnly = false,\n  additionalStyle = {},\n  children,\n}) => {\n  const handleOnChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <Box flex={1} padding={2}>\n      {children}\n      <TextareaAutosize\n        rowsMin={10}\n        style={additionalStyle}\n        rowsMax={50}\n        className=\"text\"\n        value={value}\n        placeholder={placeholder}\n        onChange={handleOnChange}\n        disabled={disabled}\n        readOnly={readOnly}\n      ></TextareaAutosize>\n    </Box>\n  );\n};\n\nexport default Area;\n","import React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport './App.css';\nimport { Box, Button, Container } from '@material-ui/core';\nimport { example, placeholder, renderArrows, replaceMultiple } from './utils';\nimport Area from 'Area';\n\nconst AppContainer = () => {\n  const [text, setText] = useState('');\n  const [from, setFrom] = useState(placeholder(10));\n  const [to, setTo] = useState('');\n\n  const handleReplace = () => {\n    const replaced = replaceMultiple(text, from, to);\n    setText(replaced);\n  };\n  const clearAll = () => {\n    setFrom('');\n    setText('');\n    setTo('');\n  };\n\n  useEffect(() => {\n    setText(example.text);\n    setFrom(example.from);\n    setTo(example.to);\n  }, []);\n\n  return (\n    <Container className=\"App\">\n      <Box height={1} display=\"flex\" flexDirection=\"column\">\n        <h1>Multiple values replacer</h1>\n        <Box flex=\"1\">\n          <div className=\"twocols\">\n            <Area\n              value={text}\n              placeholder={'text to change'}\n              setValue={setText}\n            >\n              <Box display=\"flex\" justifyContent=\"space-between\">\n                <h2>Text to modify</h2>\n                <Button size=\"small\" onClick={() => setText('')}>\n                  clear\n                </Button>\n              </Box>\n            </Area>\n          </div>\n        </Box>\n        <Box display=\"flex\">\n          <Area value={from} placeholder={'FROM list'} setValue={setFrom}>\n            <Box display=\"flex\" justifyContent=\"space-between\">\n              <h3>From</h3>\n              <Button size=\"small\" onClick={() => setFrom('')}>\n                clear\n              </Button>\n            </Box>\n          </Area>\n          <Area\n            value={renderArrows(from)}\n            placeholder={'--->\\n--->'}\n            disabled\n            readOnly\n            additionalStyle={{ textAlign: 'center', border: 'none' }}\n          >\n            <h3 style={{ textAlign: 'center' }}>{'---> '} </h3>\n          </Area>\n          <Area value={to} placeholder={'TO list'} setValue={setTo}>\n            <Box display=\"flex\" justifyContent=\"space-between\">\n              <h3>To</h3>\n              <Button size=\"small\" onClick={() => setTo('')}>\n                clear\n              </Button>\n            </Box>\n          </Area>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"space-around\" mx=\"auto\">\n          <Button\n            fullWidth={false}\n            variant=\"contained\"\n            onClick={handleReplace}\n          >\n            REPLACE\n          </Button>\n          <Box m={1} />\n          <Button variant=\"outlined\" onClick={clearAll}>\n            clear all\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AppContainer;\n","import React from 'react';\nimport { useMemo } from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppContainer from './AppContainer';\n// import {Button} from 'material-ui/core/Button';\n// todo: back button\n// how to: pass sperad props\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = useMemo(\n    // const theme =\n    () =>\n      createMuiTheme({\n        palette: {\n          // type: 'dark',\n          // todo tunr on\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      })[prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppContainer />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}